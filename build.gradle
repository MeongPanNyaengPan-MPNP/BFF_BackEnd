buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	// 2. querydsl plugins 추가
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id 'java'
}

group = 'com.mpnp'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.security:spring-security-test'
	// WebClient
	compileOnly 'org.springframework.boot:spring-boot-starter-webflux'
	compileOnly 'org.projectreactor:reactor-spring:1.0.1.RELEASE'
	compileOnly 'org.apache.httpcomponents:httpclient:4.5.13'
	implementation 'org.springframework.boot:spring-boot-starter-reactor-netty:2.7.1'
	//tomcat
	implementation 'org.springframework.boot:spring-boot-starter-tomcat'
	// OAuth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:2.7.0'
	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	// validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	implementation 'org.hibernate.validator:hibernate-validator'
	//queryDSL
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
	// gson 라이브러리
	implementation 'com.google.code.gson:gson:2.9.0'
	//JSON 변환을 위한 Jackson Library
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
	//s3 파일 업로드
	implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.1'
	//swagger
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	// commons lang3
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	//jsoup
	implementation 'org.jsoup:jsoup:1.14.3'
	//file upload
	implementation 'commons-fileupload:commons-fileupload:1.4'
	compile 'commons-io:commons-io:2.11.0'
	//scheduler dependency
	implementation 'net.javacrumbs.shedlock:shedlock-spring:4.36.0'
	implementation 'net.javacrumbs.shedlock:shedlock-provider-jdbc-template:4.36.0'
	//redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	//guava
	implementation 'com.google.guava:guava:31.1-jre'
	//quartz
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
}
tasks.named('test') {
	useJUnitPlatform()
}
def querydslDir = "$buildDir/generated/querydsl"
// JPA 사용 여부와 사용할 경로를 설정
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
// build 시 사용할 sourceSet 추가
sourceSets {
	main.java.srcDir querydslDir
}
// querydsl 컴파일시 사용할 옵션 설정
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}
// querydsl 이 compileClassPath 를 상속하도록 설정
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}
/*** comileQuerydsl.doFirst 추가*/
compileQuerydsl.doFirst {
	if (file(querydslDir).exists()) delete(file(querydslDir))
}